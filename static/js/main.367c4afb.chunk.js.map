{"version":3,"sources":["components/Main/Helper.js","components/Main/InstructionTable.js","components/Main/OffcanvasReference.js","components/DIPSwitch/Switch.js","components/DIPSwitch/DIPSwitch.js","components/Main/OutputTable.js","components/Main/InstructionInput.js","App.js","reportWebVitals.js","index.js"],"names":["PLACEHOLDER","INSTRUCTIONS","name","desc","numToBinary","num","placeholder","upper","result","toString","length","binaryToNum","binary","parseInt","binaryToHex","toUpperCase","binaryFormatter","slice","join","is4BitNumber","Number","isInteger","isBinaryValue","test","InstructionTable","Table","striped","bordered","hover","map","e","i","className","OffcanvasReference","useState","show","setShow","Button","variant","onClick","Offcanvas","onHide","Header","closeButton","Title","Body","Switch","id","checked","disabled","onCheckHandler","type","onChange","target","DIPSwitch","numSwitches","locked","defaultValues","color","handler","Array","fill","values","setValues","setDisabled","useEffect","undefined","setValue","value","temp","style","backgroundColor","colSpan","Provider","size","cursor","keys","OutputTable","addressBits","dataBits","setAddressBits","setDataBits","validate","errors","isNum","operand","is4Bit","console","log","opCode","InstructionInput","instructions","setInstructions","currentInstruction","setCurrentInstruction","setOperand","step","setStep","formik","useFormik","initialValues","onSubmit","updateBinaryCode","sendBits","arr","address","split","b","data","Card","body","Form","validated","isValid","handleSubmit","noValidate","Row","Col","md","Select","currentTarget","InputGroup","hasValidation","Text","fontFamily","FormControl","required","autoComplete","ButtonGroup","height","overflow","fontSize","index","elem","handleOpUp","splice","handleSuperOpDown","handleOpDown","handleSuperOpUp","handleDuplicate","handleRemove","App","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.367c4afb.chunk.js","sourcesContent":["export const PLACEHOLDER = \"????\";\n\nexport const INSTRUCTIONS = [\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"LDA\", desc: \"Load data from \" + PLACEHOLDER + \" to Register A\"},\n    {name: \"ADD\", desc: \"Add Register A with data from \" + PLACEHOLDER},\n    {name: \"SUB\", desc: \"Subtract Register A with data from \" + PLACEHOLDER},\n    {name: \"STA\", desc: \"Store data in Register A to \" + PLACEHOLDER},\n    {name: \"LDI\", desc: \"Load a number from 0-15 to Register A\"},\n    {name: \"JMP\", desc: \"Jump to step \" + PLACEHOLDER},\n    {name: \"JC\", desc: \"Jump to step \" + PLACEHOLDER + \" if carry flag active\"},\n    {name: \"JZ\", desc: \"Jump to step \" + PLACEHOLDER + \" if Register A is zero\"},\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"NOP\", desc: \"No Operation\"},\n    {name: \"OUT\", desc: \"Output Register A to display\"},\n    {name: \"HLT\", desc: \"Halt the clock\"},\n]\n\n\nexport const numToBinary = (num, placeholder = false) => {\n    const upper = num > 15 ? 9 : 4;\n    let result = num.toString(2);\n\n    while (result.length < upper) {\n        if (result.length !== 4)\n            result = \"0\" + result;\n        else\n            result = \" \" + result;\n    }\n\n    return placeholder && num <= 15 ? result + \" \" + PLACEHOLDER: result;\n}\n\nexport const binaryToNum = (binary) => {\n    return (parseInt(binary, 2))\n}\n\nexport const binaryToHex = (binary) => {\n    let result = parseInt(binary, 2).toString(16).toUpperCase();\n    if (binary.length > 4 && result.length === 1) result = \"0\" + result;\n    return result;\n}\n\nexport const binaryFormatter = (binary) => {\n    return binary.length < 4 ? binary : [binary.slice(0, 4) + \" \" + binary.slice(4)].join('');\n}\n\nexport const is4BitNumber = (num) => Number.isInteger(num) && (0 < num < 15 && 1 <= num.length <= 2);\n\nexport const isBinaryValue = (binary) => /^[01]+$/.test(binary);","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {numToBinary, INSTRUCTIONS} from './Helper';\nimport './Main.css';\n\n\nconst InstructionTable = () => {\n    return (\n        <Table striped bordered hover>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>Instruction Name</th>\n                <th>Machine Code</th>\n                <th>Description</th>\n            </tr>\n            </thead>\n            <tbody>\n                {INSTRUCTIONS.map((e, i) => (\n                    <tr key={i}>\n                        <td>{i}</td>\n                        <td>{e.name}</td>\n                        <td className={\"binary-text\"}>{numToBinary(i, true)}</td>\n                        <td>{e.desc}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default InstructionTable;","import React, {useState} from \"react\";\nimport {Button, Offcanvas} from \"react-bootstrap\";\nimport InstructionTable from \"./InstructionTable\";\nimport {BsInfoSquare} from \"react-icons/bs\";\n\nconst OffcanvasReference = () => {\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={handleShow}>\n                <BsInfoSquare/>\n            </Button>\n\n            <Offcanvas show={show} onHide={handleClose}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Op Code Reference</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    <InstructionTable/>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </>\n    );\n}\n\nexport default OffcanvasReference;","import React from \"react\";\nimport './Switch.css';\n\nconst Switch = ({id, checked, disabled, onCheckHandler}) => {\n\n    return (\n        <div>\n            <label className={\"switch\"}>\n                <input type={\"checkbox\"} disabled={disabled} checked={checked}\n                       onChange={(e) => onCheckHandler(id, e.target.checked)}/>\n                <span className={`slider  ${disabled ? \"slider-disabled\" : \"\"}`}/>\n            </label>\n        </div>\n    )\n}\n\nexport default Switch;","import React, {useState, useEffect} from \"react\";\nimport {BsLockFill, BsUnlockFill} from \"react-icons/bs\";\nimport {IconContext} from \"react-icons\";\nimport Switch from \"./Switch\";\nimport './DIPSwitch.css';\n\nconst DIPSwitch = ({numSwitches, locked = false, defaultValues, color=\"red\", handler}) => {\n    const [values, setValues] = useState(Array(numSwitches).fill(0));\n    const [disabled, setDisabled] = useState(locked);\n\n    useEffect(() => {\n        if (defaultValues !== undefined) {\n            setValues(defaultValues);\n        }\n    }, [defaultValues]);\n\n    const setValue = (id, value) => {\n        let temp = [...values];\n        temp[id] = +value;\n        setValues(temp);\n        handler(temp);\n    }\n\n    return (\n        <div>\n            <table className={\"dip-housing\"} style={{backgroundColor: color}}>\n                <tbody>\n                <tr>\n                    <td className={\"dip-label\"}>ON</td>\n                    <td colSpan={numSwitches - 2}/>\n                    <td>\n                        <IconContext.Provider value={{color:\"white\", size:\"0.5em\"}}>\n                            <div onClick={() => setDisabled(!disabled)} style={{cursor: \"pointer\"}}>\n                                {disabled ? <BsLockFill/> : <BsUnlockFill/>}\n                            </div>\n                        </IconContext.Provider>\n                    </td>\n                </tr>\n                <tr>\n                    {[...Array(numSwitches).keys()].map(i => <td key={i} className={\"dip-switch\"}>\n                        <Switch\n                            id={i}\n                            disabled={disabled}\n                            checked={values[i]}\n                            onCheckHandler={setValue}\n                        />\n                    </td>)}\n                </tr>\n                <tr>\n                    {[...Array(numSwitches).keys()].map(i => <td key={i} className={\"dip-number-label\"}>{i + 1}</td>)}\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default DIPSwitch;","import React, {useState} from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport './Main.css';\nimport DIPSwitch from \"../DIPSwitch/DIPSwitch\";\nimport {binaryToNum, binaryToHex, binaryFormatter} from \"./Helper\";\n\nconst OutputTable = ({addressBits, dataBits, setAddressBits, setDataBits}) => {\n\n    return (\n        <Table striped bordered>\n            <thead>\n            <tr>\n                <th>Info</th>\n                <th>Address</th>\n                <th>Data</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td className={\"info-text\"}>DIP Switch</td>\n                <td>\n                    <div className={\"dip-input\"}>\n                        <DIPSwitch numSwitches={4} color={\"blue\"} defaultValues={addressBits}\n                                   handler={setAddressBits}/>\n                    </div>\n                </td>\n                <td>\n                    <div className={\"dip-input\"}>\n                        <DIPSwitch numSwitches={8} color={\"red\"} defaultValues={dataBits}\n                                   handler={setDataBits}/>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td className={\"info-text\"}>Binary</td>\n                <td className={\"binary-text\"}>{addressBits.join(\"\")}</td>\n                <td className={\"binary-text\"}>{binaryFormatter(dataBits.join(\"\"))}</td>\n            </tr>\n            <tr>\n                <td className={\"info-text\"}>Decimal</td>\n                <td className={\"binary-text\"}>{binaryToNum(addressBits.join(\"\"))}</td>\n                <td className={\"binary-text\"}>{binaryToNum(dataBits.join(\"\"))}</td>\n            </tr>\n            <tr>\n                <td className={\"info-text\"}>Hexadecimal</td>\n                <td className={\"binary-text\"}>0x{binaryToHex(addressBits.join(\"\"), false)}</td>\n                <td className={\"binary-text\"}>0x{binaryToHex(dataBits.join(\"\"), true)}</td>\n            </tr>\n            </tbody>\n        </Table>\n    )\n}\n\nexport default OutputTable;","import React, {useEffect, useState} from \"react\";\nimport {\n    BsTrash,\n    BsChevronUp,\n    BsChevronDown,\n    BsSquare,\n    BsSquareFill,\n    BsChevronDoubleUp,\n    BsChevronDoubleDown,\n    BsPlusCircle,\n    BsBootstrapReboot,\n    BsClipboard\n} from \"react-icons/bs\";\nimport {HiOutlineSortAscending, HiOutlineSortDescending} from \"react-icons/hi\";\nimport {binaryFormatter, binaryToNum, INSTRUCTIONS, is4BitNumber, isBinaryValue, numToBinary} from \"./Helper\";\nimport {\n    Form,\n    FormControl,\n    InputGroup,\n    Row,\n    Col,\n    Card,\n    Button,\n    Table, ButtonGroup\n} from \"react-bootstrap\";\nimport OffcanvasReference from \"./OffcanvasReference\";\nimport {useFormik} from \"formik\";\n\nconst validate = (values) => {\n    const errors = {};\n    const isNum = is4BitNumber(values.operand);\n    const is4Bit = isBinaryValue(values.operand) && values.operand.length === 4;\n\n    if (!values.operand) {\n        errors.operand = \"Required\";\n    } else if (!is4Bit){\n        errors.operand = \"Must be a 4-bit binary value\";\n    } else if (!isNum && !is4Bit) {\n        errors.operand = \"Must be 4-bit binary value or number between 0 and 15\";\n    }\n    console.log(values.opCode, values.operand, isNum, is4Bit)\n    return errors;\n\n}\n\nconst InstructionInput = ({setAddressBits, setDataBits}) => {\n    const [instructions, setInstructions] = useState([]);\n    const [currentInstruction, setCurrentInstruction] = useState([\"NOP\", \"0000\"]);\n    const [operand, setOperand] = useState(\"\")\n    const [validated, setValidated] = useState(false);\n    const [step, setStep] = useState(0);\n\n    const formik = useFormik({\n        initialValues: {\n            opCode: \"NOP\",\n            operand: \"0000\"\n        },\n        validate,\n        onSubmit: values => {\n            updateBinaryCode();\n        }\n    })\n\n    const handleOperand = (e) => {\n        setOperand(e.target.value);\n    }\n\n\n    useEffect(() => {\n        if (instructions.length > 0 || (step === 0 && instructions.length === 1)) sendBits();\n        else if (instructions.length === 0) {\n            setAddressBits(Array(4).fill(0))\n            setDataBits(Array(8).fill(0))\n        }\n    }, [step, instructions])\n\n    const updateBinaryCode = () => {\n        let arr = [...currentInstruction];\n        if (is4BitNumber(operand)) {\n            arr[0] = arr[0] + \" \" + operand;\n            arr[1] = arr[1] + numToBinary(+operand)\n            setInstructions([...instructions, arr]);\n        } else if (isBinaryValue(operand)) {\n            arr[0] = arr[0] + \" \" + binaryToNum(operand);\n            arr[1] = arr[1] + operand;\n            setInstructions([...instructions, arr]);\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!validate()) {\n            console.log(operand)\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        setValidated(true);\n\n    }\n\n    const handleRestart = () => {\n        setStep(0);\n        setInstructions([]);\n    }\n\n    const handleRemove = (index) => {\n        let temp = [...instructions]\n        temp.splice(index, 1);\n        setInstructions(temp);\n    }\n\n    const handleOpUp = (index) => {\n        let temp = [...instructions];\n        let elem = temp[index];\n        temp[index] = temp[index - 1];\n        temp[index - 1] = elem;\n        setInstructions(temp);\n    }\n\n    const handleOpDown = (index) => {\n        let temp = [...instructions];\n        let elem = temp[index];\n        temp[index] = temp[index + 1];\n        temp[index + 1] = elem;\n        setInstructions(temp);\n    }\n\n    const handleSuperOpUp = (index) => {\n        let temp = [...instructions]\n        let elem = temp[index]\n        temp.splice(index, 1)\n        setInstructions([elem, ...temp])\n    }\n\n    const handleSuperOpDown = (index) => {\n        let temp = [...instructions]\n        let elem = temp[index]\n        temp.splice(index, 1)\n        setInstructions([...temp, elem])\n    }\n\n    const handleDuplicate = (index) => {\n        let temp = [...instructions]\n        temp.splice(index, 0, temp[index])\n        setInstructions(temp);\n    }\n\n    const handleStep = () => step === instructions.length - 1 ? setStep(0) : setStep(step => step + 1);\n\n    const sendBits = () => {\n        const address = numToBinary(step).split(\"\").map(b => +b);\n        const data = instructions[step][1].split(\"\").map(b => +b);\n        setAddressBits(address);\n        setDataBits(data);\n    }\n\n    return (\n        <Card body>\n            <Form validated={formik.isValid} onSubmit={formik.handleSubmit} noValidate>\n                <Row className={\"justify-content-md-center\"}>\n                    <Col md={1}>\n                        <Form.Select className=\"mb-2\" size={\"lg\"}\n                                     value={formik.values.opCode}\n                                     onChange={(e) => setCurrentInstruction(e.currentTarget.value.split(\"-\"))}>\n                            {INSTRUCTIONS.map((e, i) => (\n                                <option\n                                    key={i}\n                                    value={e.name + \"-\" + numToBinary(i)}>{e.name}</option>\n                            ))}\n                        </Form.Select>\n                    </Col>\n                    <Col md={3}>\n                        <InputGroup className=\"mb-2\" hasValidation size={'lg'}>\n                            <InputGroup.Text\n                                style={{fontFamily: \"Monospaced, monospace\"}}>{currentInstruction[1]}</InputGroup.Text>\n                            <FormControl required\n                                         type={\"text\"}\n                                         placeholder=\"Operand\"\n                                         autoComplete={\"off\"}\n                                         onChange={handleOperand}\n                            />\n                            {formik.errors.operand ? <div style={{color: \"blue\"}}>{formik.errors.operand}</div> : null}\n                            {/*<Form.Control.Feedback type={\"invalid\"} tooltip>Looks good!</Form.Control.Feedback>*/}\n                            <ButtonGroup>\n                                <Button variant={\"success\"} type={\"submit\"}><BsPlusCircle/></Button>\n                                <Button variant={\"info\"} onClick={handleStep}>\n                                    {step === instructions.length - 1 ? <HiOutlineSortAscending/> : <HiOutlineSortDescending/>}\n                                </Button>\n                                <OffcanvasReference/>\n                                    <Button variant={\"danger\"} onClick={handleRestart}><BsBootstrapReboot/></Button>\n                            </ButtonGroup>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row className={\"justify-content-md-center\"} style={{height: \"20vh\", overflow: \"scroll\"}}>\n                    <Col md={4}>\n                        <Table bordered hover size={'sm'}>\n                            <thead style={{fontSize: \"0.5em\"}}>\n                            <tr>\n                                <th>#</th>\n                                <th>OP Code</th>\n                                <th>Binary Code</th>\n                                <th>Actions</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {instructions.map((e, i) => (\n                                <tr className={`binary-text ${step === i ? \"active-op\" : \"\"}`}\n                                    style={{fontSize: \"0.5em\"}} key={i}>\n                                    <td>{i}</td>\n                                    <td>{e[0]}</td>\n                                    <td>{binaryFormatter(e[1])}</td>\n                                    <td>\n                                        <Row>\n                                            <Col>\n                                                {step === i ? <BsSquareFill/> :\n                                                    <BsSquare onClick={() => setStep(i)} className={\"op-icon\"}/>}\n                                            </Col>\n                                            <Col>{i > 0 ? <BsChevronUp onClick={() => handleOpUp(i)}\n                                                                       className={\"op-icon\"}/> :\n                                                <BsChevronDoubleDown onClick={() => handleSuperOpDown(i)}\n                                                                     className={\"op-icon\"}/>}\n                                            </Col>\n                                            <Col>\n                                                {i !== instructions.length - 1 ?\n                                                    <BsChevronDown onClick={() => handleOpDown(i)}\n                                                                   className={\"op-icon\"}/> :\n                                                    <BsChevronDoubleUp onClick={() => handleSuperOpUp(i)}\n                                                                       className={\"op-icon\"}/>}\n                                            </Col>\n                                            <Col>\n                                                <BsClipboard onClick={() => handleDuplicate(i)}\n                                                             className={\"op-icon\"}/>\n                                            </Col>\n                                            <Col>\n                                                <BsTrash onClick={() => handleRemove(i)}\n                                                         className={\"op-icon\"}/>\n                                            </Col>\n                                        </Row>\n                                    </td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Form>\n        </Card>\n    )\n}\n\nexport default InstructionInput;","// import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport OffcanvasReference from \"./components/Main/OffcanvasReference\";\nimport OutputTable from \"./components/Main/OutputTable\";\nimport {Card} from \"react-bootstrap\";\nimport InstructionInput from \"./components/Main/InstructionInput\";\n\nfunction App() {\n    const [addressBits, setAddressBits] = useState(Array(4).fill(0));\n    const [dataBits, setDataBits] = useState(Array(8).fill(0));\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Card body style={{width: \"95vw\"}}>\n              {/*<OffcanvasReference/>*/}\n              {/*<InstructionStack/>*/}\n              <OutputTable\n                  addressBits={addressBits}\n                  dataBits={dataBits}\n                  setAddressBits={setAddressBits}\n                  setDataBits={setDataBits}\n              />\n              <InstructionInput\n                  setAddressBits={setAddressBits}\n                  setDataBits={setDataBits}\n              />\n          </Card>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}